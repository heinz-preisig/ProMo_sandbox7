1 :: one =  Instantiate ( value , value )
2 :: zero =  Instantiate ( value , value )
3 :: onehalf =  Instantiate ( value , value )
4 :: to =  Instantiate ( t , value )
5 :: te =  Instantiate ( t , value )
6 :: p =  neg ( ParDiff ( U , V ) )
7 :: T =  ParDiff ( U , S )
8 :: chemPot =  ParDiff ( U , n )
9 :: H =  U - p . V
10 :: A =  U - T . S
11 :: G =  U + p . V - T . S
12 :: Boltzmann =  Instantiate ( S , value )
13 :: GasConstant =  Avogadro . Boltzmann
14 :: UC =  inv ( charge ) . U
15 :: v_x =  ParDiff ( r_x , t )
16 :: v_y =  ParDiff ( r_y , t )
17 :: v_z =  ParDiff ( r_z , t )
20 :: Mm =  Mm
21 :: Cp =  ParDiff ( H , T )
22 :: Cv =  ParDiff ( U , T )
23 :: kq_x =  inv ( V ) . ParDiff ( U , T ) . v_x
24 :: kq_y =  inv ( V ) . ParDiff ( U , T ) . v_y
25 :: kq_z =  inv ( V ) . ParDiff ( U , T ) . v_z
26 :: kq =  Stack ( kq_x , kq_y , kq_z )
27 :: kc_x =  ( Mm | S in N & S | inv ( chemPot ) ) . inv ( V ) . ParDiff ( U , p ) . v_x
28 :: kc_y =  ( Mm | S in N & S | inv ( chemPot ) ) . inv ( V ) . ParDiff ( U , p ) . v_y
29 :: kc_z =  ( Mm | S in N & S | inv ( chemPot ) ) . inv ( V ) . ParDiff ( U , p ) . v_z
30 :: kc =  Stack ( kc_x , kc_y , kc_z )
31 :: kd_x =  inv ( chemPot ) . ( v_x : ( inv ( V ) : ParDiff ( U , chemPot ) ) )
32 :: kd_y =  inv ( chemPot ) . ( v_y : ( inv ( V ) : ParDiff ( U , chemPot ) ) )
33 :: kd_z =  inv ( chemPot ) . ( v_z : ( inv ( V ) : ParDiff ( U , chemPot ) ) )
34 :: kd =  Stack ( kd_x , kd_y , kd_z )
35 :: h =  H : inv ( n )
36 :: m =  Mm | S in N & S | n
37 :: m =  m
38 :: density =  m . inv ( V )
39 :: T_NK =  P_N_NK | N | T
41 :: Ea =  Instantiate ( P_N_NK | N | GasConstant . T_NK , value )
42 :: K_NK =  Ko : exp ( neg ( Ea ) . inv ( GasConstant | N | P_N_NK . T_NK ) )
43 :: N_NS_NK =  P_S_NS | S | ( P_K_NK | K | N )
44 :: c =  inv ( V ) : n
45 :: c =  c
46 :: c_KS =  c | N & S | P_NS_KS
47 :: co_KS =  Instantiate ( c_KS , value )
